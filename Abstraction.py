# -*- coding: utf-8 -*-
"""Abstraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fka5eNw7yGx1zJ0h0vCktfed1MNlhXQq
"""

#Abstraction means hiding the unnecessary information and only showing the essential features of the object.
#An abstract class is a class that generally provides incomplete functionality and contains one or more abstract methods.
#Abstract methods are the methods that generally donâ€™t have any implementation.
#it is left to the sub classes to provide implementation for the abstract methods.
#through the process of abstraction in Python, a programmer can hide all the irrelevant data/process of an application in order to reduce complexity and increase efficiency.
#A class containing one or more abstract methods is called an abstract class.

from abc import ABC, abstractmethod

class Computer(ABC):                       #Creating abstract class by declaring ABC in it.
  @abstractmethod                          #Creating abstract method.
  def process(self):
    pass 

class Laptop(Computer):
  def process(self):
    print('Its running')

class Whiteboard(Computer):
  def write(self):
    print('its writing')

class Programmer:
  def work(self,com):
    print('Solving Bugs')
    com.process()

#com=Computer()                             #You can't create object for an abstract class
#com.process() 
lap=Laptop()
prg=Programmer()
prg.work(lap)
#prg.work(lap2)