# -*- coding: utf-8 -*-
"""Polymorphism.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16kTHYk_OBOFLla8r43BU6D44uZX1gLZs
"""

#Polymorphism
#Implementing the same thing in different ways.
#Polymorphism is the ability of an object to take on many forms.
#The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.
class Language:                #Creating the abstract class.
  def say_hello(self):
    raise NotImplementedError('Please use say_hello class in child class')

class English(Language):
  def say_hello(self):
    print('Hello')

class Hindi(Language):
  def say_hello(self):
    print('Assalamalekum')

class Telugu(Language):
  def say_hello(self):
    print('Namasthe')

def intro(lang):
  lang.say_hello()

Bryan=English()
Tarun=Telugu()
Khaleel=Hindi()

intro(Bryan)
intro(Tarun)
intro(Khaleel)

#Method Overloading   #add() add(5,10) add(5,10,15)
class Methodoverloading:
  def display(self,a=None,b=None):
    print(a,b)

m=Methodoverloading()

m.display()
m.display(5)
m.display(4,6)

#Operator Overloading  #print(5+6)->11(addition)     #print('5'+'6')->56(Concatenation)
class Student:
  def __init__(self,m1,m2):
    self.m1=m1
    self.m2=m2
  
  def __add__(self,other):
    m1=self.m1+other.m1
    m2=self.m2+other.m2
    s3=Student(m1,m2)
    return s3


s1=Student(58,69)
s2=Student(60,65)

s3=s1+s2
print(s3.m1)